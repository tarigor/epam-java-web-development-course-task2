	На вершине иерархии классов находится класс Object, который является суперклассом для всех классов. Ссылочная переменная типа Object может указывать на объект любого другого класса, на любой массив, так как массивы реализуются как классы. В классе Object определен набор методов, который наследуется всеми классами:
    protected Object clone() – создает и возвращает копию вызывающего объекта;
	boolean equals(Object ob) – предназначен для переопределения в подклассах с выполнением общих соглашений о сравнении содержимого двух объектов;
	Class<? extends Object> getClass() – возвращает объект типа Class;
	protected void finalize() – вызывается перед уничтожением объекта автоматическим сборщиком мусора (garbage collection);
	int hashCode() – возвращает хэш-код объекта;
	String toString() – возвращает представление объекта в виде строки.
	Методы notify(), notifyAll() и wait() будут рассмотрены в главе «Потоки выполнения».
	Если при создании класса предполагается проверка логической эквивалентности объектов, которая не выполнена в суперклассе, следует переоп¬ределить два метода:equals(Object ob) и hashCode(). Кроме того, переопределение этих методов необходимо, если логика приложения предусматривает использование элементов в коллекциях. Метод equals() при сравнении двух объектов возвращает истину, если содержимое объектов эквивалентно, и ложь – в противном случае. При переопределении метода equals() должны выполняться соглашения, предусмотренные спецификацией языка Java, а именно:
	· рефлексивность – объект равен самому себе;
	· симметричность – если x.equals(y) возвращает значение true, то и y.equals(x) всегда возвращает значение true;
	· транзитивность – если метод equals() возвращает значение true при сравнении объектов x и y, а также y и z, то и при сравнении x и z будет возвращено значение true;
	· непротиворечивость – при многократном вызове метода для двух не подвергшихся изменению за это время объектов возвращаемое значение всегда должно быть одинаковым;
	· ненулевая ссылка при сравнении с литералом null всегда возвращает значение false.
	При создании информационных классов также рекомендуется переопределять методы hashCode() и toString(), чтобы адаптировать их действия для создаваемого типа. Метод hashCode() переопределен, как правило, в каждом классе и возвращает число, являющееся уникальным идентификатором объекта, завися¬щим в большинстве случаев только от значения объекта. Его следует переопре¬делять всегда, когда переопределен метод equal (). Метод hashCode() возвращает хэш-код объекта, вычисление которого управляется следующими соглашениями:
	· во время работы приложения значение хэш-кода объекта не изменяется, если объект не был изменен;
	· все одинаковые по содержанию объекты одного типа должны иметь одинаковые хэш коды;
	· различные по содержанию объекты одного типа могут иметь различные хэш-коды.
	Один из способов создания правильного метода hashCode(), гарантирующий выполнение соглашений, приведен ниже, в примере # 10.
